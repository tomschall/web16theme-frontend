/**
 * Hide visually
 *
 * See http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 * for discussion of different solutions
 */

@mixin visuallyhidden() {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

@mixin visuallyhiddenReset() {
	clip: auto;
	height: auto;
	margin: 0;
	overflow: visible;
	position: static;
	width: auto;
}

@mixin visuallyhiddenFocusable() {
	@include visuallyhidden;

	&:focus,
	&:active {
		@include visuallyhiddenReset;
	}
}


/**
 * Contain floats with clearfix
 *
 * http://nicolasgallagher.com/micro-clearfix-hack/
 */

@mixin clearfix() {
	*zoom: 1;

	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}


/**
 * Lists with layout purpose
 */

@mixin resetList() {
	list-style: none;
	margin: 0;
	padding: 0;
}


/**
 * Replace text
 */

@mixin replaceText() {
	display: block;
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
}


/**
 * Better font rendering (on OS X)
 * http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
 *
 * Usage:
 *
 * .var_dark_on_light {
 * 	@include fontSmoothing;
 * }
 * .var_light_on_dark {
 * 	@include fontSmoothingReset;
 * }
 */

@mixin fontSmoothing() {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin fontSmoothingReset() {
	-webkit-font-smoothing: subpixel-antialiased;
	-moz-osx-font-smoothing: auto;
}


/**
 * Placeholder in input fields
 */

@mixin placeholder() {

	&::-webkit-input-placeholder {
		@content;
	}
	&:-moz-placeholder { // Firefox 18-
		@content;
	}
	&::-moz-placeholder { // Firefox 19+
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
}

@mixin contentWrapperForSmallDevices($gutterSize: 0) {
	@include mq($from: small, $to: medium) {
		padding: 0 ($pagePaddingTablet - $gutterSize);
	}

	@include mq($to: small) {
		padding: 0 ($pagePaddingPhone - $gutterSize);
	}
}

@mixin yellowBarDiffer() {
	padding-left: $paddingBehindYellowBar;

	@include mq($from: betweener, $to: wide) {
		.header__wide & {
			padding-left: $paddingBehindYellowBarWide
		}

		@include mq($from: betweener, $to: large) {
			padding-left: $paddingBehindYellowBarWideNarrow;
		}
	}

	@include mq($from: medium, $to: large) {
		padding-left: $paddingBehindYellowBarNarrow;
	}

	@include mq($from: wide) {
		padding-left: $paddingBehindYellowBarSuperWide;
	}

	@include contentWrapperForSmallDevices();
}

@mixin contentWrapper($gutterSize: 0, $hasGrid: true) {
	@if $hasGrid {
		@include container();
	}

	padding: 0 ($pagePadding - $gutterSize ) 0 ($paddingBehindYellowBar - $gutterSize);

	@include mq($from: betweener, $to: wide) {
		.header__wide & {
			padding: 0 ($pagePadding - $gutterSize) 0 ($paddingBehindYellowBarWide - $gutterSize);
		}

		@include mq($from: betweener, $to: large) {
			padding: 0 ($pagePaddingSmall - $gutterSize) 0 ($paddingBehindYellowBarWideNarrow - $gutterSize);
		}
	}

	@include mq($from: medium, $to: large) {
		padding: 0 ($pagePaddingSmall - $gutterSize) 0 ($paddingBehindYellowBarNarrow - $gutterSize);
	}

	@include mq($from: wide) {
		padding: 0 ($pagePaddingWide - $gutterSize) 0 ($paddingBehindYellowBarSuperWide - $gutterSize);
	}

	@include contentWrapperForSmallDevices($gutterSize);
}


@mixin pushLeftAccordingToHeader($attr) {
	#{$attr}: $paddingBehindYellowBar;

	@include mq($from: betweener, $to: wide) {
		.header__wide & {
			#{$attr}: $paddingBehindYellowBarWide;
		}

		@include mq($from: betweener, $to: large) {
			#{$attr}: $paddingBehindYellowBarWideNarrow;
		}
	}

	@include mq($from: medium, $to: large) {
		#{$attr}: $paddingBehindYellowBarNarrow
	}

	@include mq($from: wide) {
		#{$attr}: $paddingBehindYellowBarSuperWide;
	}

	@include mq($to: subnav) {
		#{$attr}: 100px;
	}
}

@mixin gridWrapper($gutterSize: 0) {
  @include container();

	max-width: none;

  margin-left: -1 * $gutterSize;
  margin-right: -1 * $gutterSize;
}

@mixin basicUnitHeight($attr) {
	#{$attr}: basicUnitHeight(normal);

  	@include mq($from: wide) {
	  	#{$attr}: basicUnitHeight(xxl);
	}

	@include mq($to: large) {
		#{$attr}: basicUnitHeight(small);
	}
}

@mixin clickAreaSize($attr) {
  #{$attr}: clickAreaSizes(normal);

  @include mq($from: wide) {
	#{$attr}: clickAreaSizes(xxl);
  }

  @include mq($to: large) {
	#{$attr}: clickAreaSizes(small);
  }
}


@mixin bleedFull($gutterSize: 0) {
	margin-left: -1 * $paddingBehindYellowBar + $gutterSize;
	margin-right: -1 * $pagePadding + $gutterSize;

	@include mq($from: betweener, $to: wide) {
		.header__wide & {
			margin-left: -1 * $paddingBehindYellowBarWide + $gutterSize;
		}

		@include mq($from: betweener, $to: large) {
			margin-left: -1 * $paddingBehindYellowBarWideNarrow + $gutterSize;
			margin-right: -1 * $pagePaddingSmall  + $gutterSize;
		}
	}

	@include mq($from: medium, $to: large) {
		margin-left: -1 * $paddingBehindYellowBarNarrow + $gutterSize;
		margin-right: -1 * $pagePaddingSmall  + $gutterSize;
	}

	@include mq($from: wide) {
		margin-left: -1 * $paddingBehindYellowBarSuperWide + $gutterSize;
		margin-right: -1 * $pagePaddingWide  + $gutterSize;
	}

	@include mq($from: small, $to: medium) {
		margin: 0 -1 * $pagePaddingTablet + $gutterSize;
	}

	@include mq($to: small) {
		margin: 0 -1 * $pagePaddingPhone + $gutterSize;
	}
}

@mixin bleed($hasPadding: true) {
	margin-left: -100%;
	margin-right: -100%;

	@if $hasPadding {
		padding-left: 100%;
		padding-right: 100%;
	}
}

@mixin bleedFullFromContent($gutterSize: 0) {
	margin-left: -1 * $paddingBehindYellowBar + $gutterSize;
	margin-right: -1 * $pagePadding + $gutterSize;

	@include mq($from: betweener, $to: wide) {
		.header__wide & {
			margin-left: -1 * $paddingBehindYellowBarWide + $gutterSize;
		}

		@include mq($from: betweener, $to: large) {
			margin-left: -1 * $paddingBehindYellowBarWideNarrow + $gutterSize;
			margin-right: -1 * $pagePaddingSmall  + $gutterSize;
		}
	}

	@include mq($from: medium, $to: large) {
		margin-left: -1 * $paddingBehindYellowBarNarrow + $gutterSize;
		margin-right: -1 * $pagePaddingSmall  + $gutterSize;
	}

	@include mq($from: wide) {
		margin-left: -1 * $paddingBehindYellowBarSuperWide + $gutterSize;
		margin-right: -1 * $pagePaddingWide  + $gutterSize;
	}

	@include mq($from: small, $to: medium) {
		margin: 0 -1 * $pagePaddingTablet + $gutterSize;
	}

	@include mq($to: small) {
		margin: 0 -1 * $pagePaddingPhone + $gutterSize;
	}
}

@mixin centerDataurlIcon() {
  position: absolute;

  top: 50%;
  left: 50%;

  transform: translate(-50%,-50%);
}

@mixin defaultElementHeight() {
	height: buttonHeight(desktop);
	line-height: buttonHeight(desktop);

	&.small_button {
		height: buttonHeight(mobile);
		line-height: buttonHeight(mobile);

		font-size: 0.916667rem;
	}

	&.mini_button {
		height: buttonHeight(mini);
		line-height: buttonHeight(mini);
	}

	@include mq($to: medium) {
		height: buttonHeight(mobile);
		line-height: buttonHeight(mobile);

		&.mini_button {
			height: buttonHeight(mini);
			line-height: buttonHeight(mini);
		}
	}
}

@mixin noStyledButton() {
	background-color: transparent;
	font-size: 1rem;
	text-align: left;
	font-weight: 300;
	color: $colorBlack;

	letter-spacing: normal;
	text-transform: none;
	padding: 0;
	height: auto;
	line-height: 1;

	width: auto;
	min-height: 0;
	min-width: 0;

	&:hover,
	&:focus,
	&:active {
		background-color: transparent;
	}
}
